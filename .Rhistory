#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#We can also check how long hierBAPS takes to run on the test dataset of 515 samples and 744 SNPs.
#system.time(hierBAPS(snp.matrix, n.cores = 6, max.depth = 6, n.pops = 200, quiet = TRUE))
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 8, max.depth = 10, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Save
write.csv(hb.results$partition.df, "hierbaps_partition_1177_l4.csv", row.names = FALSE)
save_lml_logs(hb.results, "hierbaps_logML_1177_l4.txt")
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 8, max.depth = 10, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Save
write.csv(hb.results$partition.df, "hierbaps_partition_1177_l4.csv", row.names = FALSE)
save_lml_logs(hb.results, "hierbaps_logML_1177_l4.txt")
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 8, max.depth = 10, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Save
write.csv(hb.results$partition.df, "hierbaps_partition_1177_l4.csv", row.names = FALSE)
save_lml_logs(hb.results, "hierbaps_logML_1177_l4.txt")
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.2)))
gg_1177
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.1)))
gg_1177
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.2)))
gg_1177
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.3)))
gg_1177
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.10)))
gg_1177
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.iqtree"
iqtree_1177 <- phytools::read.newick(newick.file.name)
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.10)))
gg_1177
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
View(hb.results)
newick.file.name
run_alignment_no_resis.fas.treefile
#Plotting results
newick.file.name <- "run_alignment_no_resis_noroot.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
View(hb.results)
head(hb.results$partition.df)
View(hb.results)
newick.file.name <- "run_alignment_no_resis_noroot.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
View(hb.results)
head(hb.results$partition.df)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
View(snp.matrix)
View(snp.matrix)
View(gg_1177)
View(snp.matrix)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 6, max.depth = 8, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
hb.results <- hierBAPS(snp.matrix, n.cores = 6, max.depth = 2, n.pops = 10, quiet = TRUE)
hb.results <- hierBAPS(snp.matrix, n.cores = 6, max.depth = 4, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
system.time(hierBAPS(snp.matrix, n.cores = 6, max.depth = 10, n.pops = 200, quiet = TRUE))
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
View(gg)
View(gg_1177)
View(iqtree_1177)
View(hb.results)
View(baps_1177)
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#We can also check how long hierBAPS takes to run on the test dataset of 515 samples and 744 SNPs.
#system.time(hierBAPS(snp.matrix, n.cores = 6, max.depth = 6, n.pops = 200, quiet = TRUE))
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 6, max.depth = 8, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Save
write.csv(hb.results$partition.df, "hierbaps_partition_1177_l4.csv", row.names = FALSE)
save_lml_logs(hb.results, "hierbaps_logML_1177_l4.txt")
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Loading data
fasta.file.name <- "run_alignment_no_resis.fas"
snp.matrix <- load_fasta(fasta.file.name)
#We can also check how long hierBAPS takes to run on the test dataset of 515 samples and 744 SNPs.
#system.time(hierBAPS(snp.matrix, n.cores = 6, max.depth = 6, n.pops = 200, quiet = TRUE))
#To run hierBAPS with 2 levels and 20 initial clusters we run
hb.results <- hierBAPS(snp.matrix, n.cores = 8, max.depth = 8, n.pops = 100, quiet = TRUE)
head(hb.results$partition.df)
#Save
write.csv(hb.results$partition.df, "hierbaps_partition_1177_l4.csv", row.names = FALSE)
save_lml_logs(hb.results, "hierbaps_logML_1177_l4.txt")
#Run hierBAPS.
#install.packages('rhierbaps')
library(rhierbaps)
library(ggtree)
library(phytools)
library(ape)
set.seed(1234)
#Plotting results
newick.file.name <- "run_alignment_no_resis.fas.treefile"
iqtree_1177 <- phytools::read.newick(newick.file.name)
baps_1177 <- read.csv("hierbaps_partition_1177_l4.csv", sep = ",", header = T)
baps_1177$Isolate <- as.character(baps_1177$Isolate)
baps_1177$level.1 <- as.double(baps_1177$level.1)
baps_1177$level.2 <- as.double(baps_1177$level.2)
#A simple coloured tree allows us to see the top level cluster assignment from hierBAPS.
gg <- ggtree(iqtree_1177, layout = "circular")
gg_1177 <- gg %<+% baps_1177
gg_1177 <- gg_1177 + geom_tippoint(aes(color = factor(level.4)))
gg_1177
head(hb.results$partition.df)
hb.results$partition.df
View(snp.matrix)
class(snp.matrix)
str(snp.matrix)
View(snp.matrix)
